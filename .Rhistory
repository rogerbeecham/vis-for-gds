scale_fill_distiller(palette="Blues", direction=1)+
theme(
panel.spacing=unit(-0.2, "lines"),
legend.position="bottom",
axis.title.x=element_blank(),axis.title.y=element_blank(),
strip.text.x = element_blank(), strip.text.y = element_blank()
)
d_od_global <- ggplot()+
geom_sf(data=plot_data_temp %>% mutate(count=if_else(o_bor==d_bor,0,count)), aes(fill=count), colour="#616161", size=0.15, alpha=0.9)+
geom_sf(data=plot_data_temp  %>% filter(bor_focus==1), fill="transparent",  colour="#373737", size=0.3)+
geom_text(data=plot_data_temp %>% filter(bor_focus==1),
aes(x=east, y=north, label=str_sub(BOR,1,1)),
colour="#252525", alpha=0.9, size=2, show.legend=FALSE, family="Roboto Condensed",
hjust="centre", vjust="middle")+
geom_text(data=plot_data_temp %>% filter(bor_focus==1),
aes(x=bbox_grid$xmax, y=bbox_grid$ymin, label=BOR),
colour="#252525", alpha=0.6, size=2.3, show.legend=FALSE, family="Roboto Condensed",
hjust="right", vjust="bottom")+
coord_sf(crs=st_crs(plot_data_temp), datum=NA)+
guides(fill=FALSE)+
labs(subtitle="global scaling by destination borough: same OD excluded")+
facet_grid(d_fy~d_fx, shrink=FALSE)+
scale_fill_distiller(palette="Blues", direction=1)+
theme(
panel.spacing=unit(-0.2, "lines"),
legend.position="bottom",
axis.title.x=element_blank(),axis.title.y=element_blank(),
strip.text.x = element_blank(), strip.text.y = element_blank()
)
d_od_local <- ggplot()+
geom_sf(data=plot_data_temp %>%
mutate(count=if_else(o_bor==d_bor,0,count)) %>%
group_by(d_bor) %>%
mutate(count_rescaled=(count-min(count))/(max(count)-min(count))), aes(fill=count_rescaled), colour="#616161", size=0.15, alpha=0.9)+
geom_sf(data=plot_data_temp  %>% filter(bor_focus==1), fill="transparent",  colour="#373737", size=0.3)+
geom_text(data=plot_data_temp %>% filter(bor_focus==1),
aes(x=east, y=north, label=str_sub(BOR,1,1)),
colour="#252525", alpha=0.9, size=2, show.legend=FALSE, family="Roboto Condensed",
hjust="centre", vjust="middle")+
geom_text(data=plot_data_temp %>% filter(bor_focus==1),
aes(x=bbox_grid$xmax, y=bbox_grid$ymin, label=BOR),
colour="#252525", alpha=0.6, size=2.3, show.legend=FALSE, family="Roboto Condensed",
hjust="right", vjust="bottom")+
coord_sf(crs=st_crs(plot_data_temp), datum=NA)+
guides(fill=FALSE)+
labs(subtitle="local scaling by destination borough: same OD excluded")+
facet_grid(d_fy~d_fx, shrink=FALSE)+
scale_fill_distiller(palette="Blues", direction=1)+
theme(
panel.spacing=unit(-0.2, "lines"),
legend.position="bottom",
axis.title.x=element_blank(),axis.title.y=element_blank(),
strip.text.x = element_blank(), strip.text.y = element_blank()
)
plot <- d_od_global + d_od_local +
plot_annotation(
title="OD Map layout (map-within-map)",
caption="See Wood et al (2010)")
ggsave(filename="./static/class/05-class_files/d-od-map.png", plot=plot,width=13.3, height=6, dpi=300)
plot <- d_od_global + d_od_local +
plot_annotation(
title="OD Map layout (map-within-map)",
subtitle="--Large cell: destinations; small cell: origins",
caption="See Wood et al (2010)")
ggsave(filename="./static/class/05-class_files/d-od-map.png", plot=plot,width=12.7, height=6, dpi=300)
d_od_global <- ggplot()+
geom_sf(data=plot_data_temp %>% mutate(count=if_else(o_bor==d_bor,0,count)), aes(fill=count), colour="#616161", size=0.15, alpha=0.9)+
geom_sf(data=plot_data_temp  %>% filter(bor_focus==1), fill="transparent",  colour="#373737", size=0.3)+
geom_text(data=plot_data_temp %>% filter(bor_focus==1),
aes(x=east, y=north, label=str_sub(BOR,1,1)),
colour="#252525", alpha=0.9, size=2, show.legend=FALSE, family="Roboto Condensed",
hjust="centre", vjust="middle")+
geom_text(data=plot_data_temp %>% filter(bor_focus==1),
aes(x=bbox_grid$xmax, y=bbox_grid$ymin, label=BOR),
colour="#252525", alpha=0.6, size=2.3, show.legend=FALSE, family="Roboto Condensed",
hjust="right", vjust="bottom")+
coord_sf(crs=st_crs(plot_data_temp), datum=NA)+
guides(fill=FALSE)+
labs(caption="global scaling by destination borough: same OD excluded")+
facet_grid(d_fy~d_fx, shrink=FALSE)+
scale_fill_distiller(palette="Blues", direction=1)+
theme(
panel.spacing=unit(-0.2, "lines"),
legend.position="bottom",
axis.title.x=element_blank(),axis.title.y=element_blank(),
strip.text.x = element_blank(), strip.text.y = element_blank()
)
d_od_local <- ggplot()+
geom_sf(data=plot_data_temp %>%
mutate(count=if_else(o_bor==d_bor,0,count)) %>%
group_by(d_bor) %>%
mutate(count_rescaled=(count-min(count))/(max(count)-min(count))), aes(fill=count_rescaled), colour="#616161", size=0.15, alpha=0.9)+
geom_sf(data=plot_data_temp  %>% filter(bor_focus==1), fill="transparent",  colour="#373737", size=0.3)+
geom_text(data=plot_data_temp %>% filter(bor_focus==1),
aes(x=east, y=north, label=str_sub(BOR,1,1)),
colour="#252525", alpha=0.9, size=2, show.legend=FALSE, family="Roboto Condensed",
hjust="centre", vjust="middle")+
geom_text(data=plot_data_temp %>% filter(bor_focus==1),
aes(x=bbox_grid$xmax, y=bbox_grid$ymin, label=BOR),
colour="#252525", alpha=0.6, size=2.3, show.legend=FALSE, family="Roboto Condensed",
hjust="right", vjust="bottom")+
coord_sf(crs=st_crs(plot_data_temp), datum=NA)+
guides(fill=FALSE)+
labs(caption="local scaling by destination borough: same OD excluded")+
facet_grid(d_fy~d_fx, shrink=FALSE)+
scale_fill_distiller(palette="Blues", direction=1)+
theme(
panel.spacing=unit(-0.2, "lines"),
legend.position="bottom",
axis.title.x=element_blank(),axis.title.y=element_blank(),
strip.text.x = element_blank(), strip.text.y = element_blank()
)
plot <- d_od_global + d_od_local +
plot_annotation(
title="OD Map layout (map-within-map)",
subtitle="--Large cell: destinations; small cell: origins",
caption="See Wood et al (2010)")
ggsave(filename="./static/class/05-class_files/d-od-map.png", plot=plot,width=12.7, height=6, dpi=300)
ggsave(filename="./static/class/05-class_files/d-od-map.png", plot=plot,width=12.5, height=6, dpi=300)
ggsave(filename="./static/class/05-class_files/d-od-map.png", plot=plot,width=12.6, height=6, dpi=300)
edges <- od_pairs %>%
# Filter only *within* London.
filter(la_1 %in% london_las, la_2 %in% london_las) %>%
group_by(la_1, la_2) %>%
summarise(
across(c(all:other), sum)
) %>%
ungroup %>%
mutate(o_bor=la_1, d_bor=la_2) %>%
select(-c(la_1, la_2))
nodes_d <- od_pairs_borough %>%
group_by(la_2) %>%
summarise(
across(c(all:other), sum)
) %>%
ungroup %>%
rename(d_bor = la_2) %>%
mutate(type="in")
nodes_d <- od_pairs_borough %>%
group_by(la_2) %>%
summarise(
across(c(all:other), sum)
) %>%
ungroup %>%
rename(bor = la_2) %>%
mutate(type="in")
nodes_o <- od_pairs_borough %>%
group_by(la_1) %>%
summarise(
across(c(all:other), sum)
) %>%
ungroup %>%
rename(bor = la_1) %>%
mutate(type="out")
nodes  <- nodes_o %>% rbind(nodes_d)
nodes_d <- od_pairs_borough %>%
group_by(la_2) %>%
summarise(
across(c(all:other), sum)
) %>%
ungroup %>%
rename(bor = la_2) %>%
mutate(type="destination")
nodes_o <- od_pairs_borough %>%
group_by(la_1) %>%
summarise(
across(c(all:other), sum)
) %>%
ungroup %>%
rename(bor = la_1) %>%
mutate(type="origin")
nodes  <- nodes_o %>% rbind(nodes_d)
View(nodes)
edges <- od_pairs %>%
# Filter only *within* London.
filter(la_1 %in% london_las, la_2 %in% london_las) %>%
group_by(la_1, la_2) %>%
summarise(
across(c(all:other), sum)
) %>%
ungroup %>%
mutate(o_bor=la_1, d_bor=la_2,
public_transport=train+bus+light_rail,
car=car_driver+car_passenger
) %>%
select(-c(la_1, la_2,
other,car_driver+car_passenger, train, bus, light_rail, taxi, motorbike, other))
edges <- od_pairs %>%
# Filter only *within* London.
filter(la_1 %in% london_las, la_2 %in% london_las) %>%
group_by(la_1, la_2) %>%
summarise(
across(c(all:other), sum)
) %>%
ungroup %>%
mutate(o_bor=la_1, d_bor=la_2,
public_transport=train+bus+light_rail,
car=car_driver+car_passenger
) %>%
select(-c(la_1, la_2,
other, car_driver, car_passenger, train, bus, light_rail,
taxi, motorbike, other)
)
View(edges)
edges <- od_pairs %>%
# Filter only *within* London.
filter(la_1 %in% london_las, la_2 %in% london_las) %>%
group_by(la_1, la_2) %>%
summarise(
across(c(all:other), sum)
) %>%
ungroup %>%
mutate(o_bor=la_1, d_bor=la_2,
public_transport=train+bus+light_rail,
car=car_driver+car_passenger
) %>%
select(-c(la_1, la_2,
other, car_driver, car_passenger, train, bus, light_rail,
taxi, motorbike, other, from_home)
)
View(edges)
odes_d <- od_pairs_borough %>%
group_by(la_2) %>%
summarise(
across(c(all:other), sum)
) %>%
ungroup %>%
rename(bor = la_2) %>%
mutate(
type="destination",
-c(other, car_driver, car_passenger, train, bus, light_rail,
taxi, motorbike, other, from_home)
)
nodes_o <- od_pairs_borough %>%
group_by(la_1) %>%
summarise(
across(c(all:other), sum)
) %>%
ungroup %>%
rename(bor = la_1) %>%
mutate(
type="origin",
-c(other, car_driver, car_passenger, train, bus, light_rail,
taxi, motorbike, other, from_home)
)
nodes_d <- od_pairs_borough %>%
group_by(la_2) %>%
summarise(
across(c(all:other), sum)
) %>%
ungroup %>%
rename(bor = la_2) %>%
mutate(
type="destination",
-c(other, car_driver, car_passenger, train, bus, light_rail,
taxi, motorbike, other, from_home)
)
nodes_o <- od_pairs_borough %>%
group_by(la_1) %>%
summarise(
across(c(all:other), sum)
) %>%
ungroup %>%
rename(bor = la_1) %>%
mutate(
type="origin",
-c(other, car_driver, car_passenger, train, bus, light_rail,
taxi, motorbike, other, from_home)
)
nodes_d <- od_pairs_borough %>%
group_by(la_2) %>%
summarise(
across(c(all:other), sum)
) %>%
ungroup %>%
rename(bor = la_2) %>%
mutate(
type="destination",
-c(other, car_driver, car_passenger, train, bus, light_rail,
taxi, motorbike, other, from_home)
)
od_pairs_borough %>%
group_by(la_2) %>%
summarise(
across(c(all:other), sum)
) %>%
ungroup %>%
rename(bor = la_2)
nodes_d <- od_pairs_borough %>%
group_by(la_2) %>%
summarise(
across(c(all:other), sum)
) %>%
ungroup %>%
rename(bor = la_2) %>%
mutate(
type="destination",
public_transport=train+bus+light_rail,
car=car_driver+car_passenger
) %>%
select(c(other, car_driver, car_passenger, train, bus, light_rail,
taxi, motorbike, other, from_home))
nodes_o <- od_pairs_borough %>%
group_by(la_1) %>%
summarise(
across(c(all:other), sum)
) %>%
ungroup %>%
rename(bor = la_1) %>%
mutate(
type="origin",
public_transport=train+bus+light_rail,
car=car_driver+car_passenger
) %>%
select(c(other, car_driver, car_passenger, train, bus, light_rail,
taxi, motorbike, other, from_home)
)
nodes  <- nodes_o %>% rbind(nodes_d)
nodes %>%
filter(type=="destination")
nodes_d <- od_pairs_borough %>%
group_by(la_2) %>%
summarise(
across(c(all:other), sum)
) %>%
ungroup %>%
rename(bor = la_2) %>%
mutate(
type="destination",
public_transport=train+bus+light_rail,
car=car_driver+car_passenger
) %>%
select(-c(other, car_driver, car_passenger, train, bus, light_rail,
taxi, motorbike, other, from_home))
nodes_o <- od_pairs_borough %>%
group_by(la_1) %>%
summarise(
across(c(all:other), sum)
) %>%
ungroup %>%
rename(bor = la_1) %>%
mutate(
type="origin",
public_transport=train+bus+light_rail,
car=car_driver+car_passenger
) %>%
select(-c(other, car_driver, car_passenger, train, bus, light_rail,
taxi, motorbike, other, from_home)
)
nodes  <- nodes_o %>% rbind(nodes_d)
nodes %>%
filter(type=="destination")
pivot_longer()
?pivot_longer()
nodes %>%
filter(type=="destination") %>%
pivot_longer(cols=c(bicycle, public_transport, car), names_to="mode", values_to="count")
nodes %>%
filter(type=="destination") %>%
pivot_longer(cols=c(bicycle, public_transport, car), names_to="mode", values_to="count") %>%
ggplot() %>%
geom_col(aes(x=bor, y=count))
nodes %>%
filter(type=="destination") %>%
pivot_longer(cols=c(bicycle, public_transport, car), names_to="mode", values_to="count") %>%
ggplot() +
geom_col(aes(x=bor, y=count))
nodes %>%
filter(type=="destination") %>%
pivot_longer(cols=c(bicycle, public_transport, car), names_to="mode", values_to="count") %>%
ggplot() +
geom_col(aes(x=bor, y=count, fill=mode))
nodes %>%
filter(type=="destination") %>%
pivot_longer(cols=c(bicycle, public_transport, car), names_to="mode", values_to="count") %>%
ggplot() +
geom_col(aes(x=bor, y=count, fill=mode)) +
coord_flip()
nodes %>%
filter(type=="destination") %>%
pivot_longer(cols=c(bicycle, public_transport, car), names_to="mode", values_to="count") %>%
ggplot() +
geom_col(aes(x=reorder(bor, count), y=count, fill=mode)) +
coord_flip()
nodes %>%
filter(type=="destination") %>%
pivot_longer(cols=c(bicycle, public_transport, car), names_to="mode", values_to="count") %>%
ggplot() +
geom_col(aes(x=reorder(bor, count), y=count, fill=mode)) +
labs(x="destination", y="count") +
coord_flip()
nodes %>%
filter(type=="destination") %>%
pivot_longer(cols=c(bicycle, public_transport, car), names_to="mode", values_to="count") %>%
ggplot() +
geom_col(aes(x=reorder(bor, count), y=count, fill=mode), fill=TRUE) +
labs(x="destination", y="count") +
coord_flip()
?geom_col
nodes %>%
filter(type=="destination") %>%
pivot_longer(cols=c(bicycle, public_transport, car), names_to="mode", values_to="count") %>%
ggplot() +
geom_col(aes(x=reorder(bor, count), y=count, fill=mode), position_fill()) +
labs(x="destination", y="count") +
coord_flip()
nodes %>%
filter(type=="destination") %>%
pivot_longer(cols=c(bicycle, public_transport, car), names_to="mode", values_to="count") %>%
ggplot() +
geom_col(aes(x=reorder(bor, count), y=count, fill=mode), position="fill") +
labs(x="destination", y="count") +
coord_flip()
blogdown::stop_server()
library(covdata)
library(tidyverse)
library(sf)
library(lubridate)
library(RcppRoll)
# States.
url <- "https://www2.census.gov/geo/tiger/GENZ2018/shp/cb_2018_us_state_20m.zip"
download.file(url, "./data/state_boundaries.zip", mode="wb")
unzip("./data/state_boundaries.zip", exdir="./data/state_boundaries")
# Files have complex names that vary on download, so record and use on reading-in.
temp_boundary_file <- list.files("./data/state_boundaries", pattern=".shp")
state_boundaries <- st_read(paste0("./data/state_boundaries/", temp_boundary_file[1]))
# Delete directory with large shapefile.
unlink("./data/state_boundaries", recursive=TRUE)
# Filter only on mainland states
state_boundaries <- state_boundaries %>% filter(!NAME %in% c("Alaska", "Hawaii", "Puerto Rico"))
# Use Albers Equal Area.
state_boundaries <- st_transform(state_boundaries, crs=5070)
st_crs(state_boundaries)
plot(state_boundaries %>% select(NAME))
st_wrtie(state_boundaries, "state_boundaries.geojson")
st_write(state_boundaries, "state_boundaries.geojson")
here()
library(here)
blogdown::build_site()
blogdown::build_site()
blogdown::build_site(build_rmd = TRUE)
blogdown::serve_site()
blogdown::stop_server()
blogdown::stop_server()
blogdown::build_site(build_rmd = TRUE)
blogdown::stop_server()
blogdown::build_site(build_rmd = TRUE)
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site(build_rmd = TRUE)
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site(build_rmd = TRUE)
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site(build_rmd = TRUE)
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site(build_rmd = TRUE)
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site(build_rmd = TRUE)
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::hugo_version()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site(build_rmd = TRUE)
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site(build_rmd = TRUE)
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site()
blogdown::serve_site()
blogdown::stop
stop_server()
blogdown::stop_server()
blogdown::build_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site(build_rmd = TRUE)
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::build_site(build_rmd = TRUE)
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
getwd()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site(build_rmd = TRUE)
blogdown::serve_site()
View(edges_o)
